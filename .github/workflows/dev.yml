name: CI/CD Pipeline - Dev

on:
  push:
    branches:
      - dev

env:
  AWS_ACCOUNT: "357834747308"
  AWS_REGION: "us-east-1"
  APP_NAME: "linuxtips-app"
  CLUSTER_NAME: "linuxtips-ecs-cluster"
  REPOSITORY_NAME: "linuxtips/$APP_NAME"

jobs:
  ci-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      
      - name: Install GoLint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.61.0

      - name: Lint App
        run: golangci-lint run ./... -E errcheck
        working-directory: ./app

      - name: Test App
        run: go test -v ./...
        working-directory: ./app
    
  ci-terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.7'

      - name: Terraform format check
        run: terraform fmt -recursive -check
        working-directory: ./terraform

      - name: Terraform init
        run: terraform init -backend-config=environment/${GITHUB_REF_NAME}/backend.tfvars
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
      
      - name: Terraform validate
        run: terraform validate
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

  build-publish:
    runs-on: ubuntu-latest
    needs:
      - ci-app
      - ci-terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to AWS ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Build image
        run: docker build -t app .
        working-directory: ./app

      - name: Create ECR repository if not exists
        run: |
          set +e
          REPO_EXISTS=$(aws ecr describe-repositories --repository-names ${{ env.REPOSITORY_NAME }} 2>&1)
          if [[ $REPO_EXISTS == *"RepositoryNotFoundException"* ]]; then
            echo " ->Repository ${{ env.REPOSITORY_NAME }} not found. Creating..."
            aws ecr create-repository --repository-name ${{ env.REPOSITORY_NAME }}
          else
            echo " ->Repository ${{ env.REPOSITORY_NAME }} already exists."
          fi
          set -e
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Tag image
        run: docker tag app:latest ${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPOSITORY_NAME }}:${GITHUB_SHA::8}
        working-directory: ./app

      - name: Publish image
        run: docker push ${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPOSITORY_NAME }}:${GITHUB_SHA::8}
        working-directory: ./app

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-publish
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.7'

      - name: Terraform init
        run: terraform init -backend-config=environment/${GITHUB_REF_NAME}/backend.tfvars
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Terraform plan
        run: terraform plan -backend-config=environment/${GITHUB_REF_NAME}/terraform.tfvars -var container_image=${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPOSITORY_NAME }}:${GITHUB_SHA::8}
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
      
      - name: Terraform apply
        run: terraform apply -auto-approve -backend-config=environment/${GITHUB_REF_NAME}/terraform.tfvars -var container_image=${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPOSITORY_NAME }}:${GITHUB_SHA::8}
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

  wait-ecs-deploy:
    runs-on: ubuntu-latest
    needs:
      - deploy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: ECS wait for deploy to complete
        run: aws ecs wait services-stable --cluster ${{ env.CLUSTER_NAME }} --services ${{ env.APP_NAME }}